{"version":3,"sources":["images/A1.jpg","images/A2.jpg","images/A3.jpg","images/A4.jpg","images/A5.jpg","images/A6.jpg","images/A7.jpg","images/A8.jpg","images/A9.jpg","images/A10.jpg","images/A11.jpg","images/A12.jpg","components/Navbar/Navbar.js","components/Character/Character.js","components/Container/Container.js","components/Footer/Footer.js","components/Banner/Banner.js","images.js","components/ClickyGame.js","index.js"],"names":["module","exports","Navbar","props","className","navMsgColor","navMessage","score","highScore","Character","onClick","e","clickEvent","target","src","name","alt","Container","shake","characters","map","a","i","key","Footer","Banner","images","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","A11","A12","ClickyGame","state","allCharacters","shuffleArray","wasClicked","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","this","shuffled","includes","setState","setTimeout","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fed4df6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/A1.143496f3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/A2.9cf126d9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/A3.8d69685f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/A4.f97a171e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/A5.8a7428a2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/A6.c832101c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/A7.deb6526f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/A8.af0a1556.jpg\";","module.exports = __webpack_public_path__ + \"static/media/A9.730da44c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/A10.9118ddb8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/A11.18013a4c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/A12.de8553c7.jpg\";","import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n  <div className=\"navbar \">\n    <div>React Memory Game</div>\n    <div className={props.navMsgColor}>{props.navMessage}</div>\n    <div>\n      Score: {props.score} <span className=\"pipe\">|</span> High Score:{\" \"}\n      {props.highScore}\n    </div>\n  </div>\n);\n\nexport default Navbar;\n","import React from 'react';\nimport './Character.css';\n\n// the onClick function is defined as a callback so that the clicked elements value\n// can be passed to props.clickEvent to check if the image has been clicked or not\nconst Character = props => (\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\n  </div>\n);\n\nexport default Character;\n","import React from 'react';\nimport './Container.css';\nimport Character from '../Character';\n\n// main container for each Character component\n// loops through each index in props.characters, which contains an array of character images\n// to create a new Character component for each image\n// attaches the passed down clickEvent function to each Character component\nconst Container = props => (\n  // loops through\n  <div\n    className={\n      props.shake\n        ? 'container d-flex flex-wrap justify-content-center shake'\n        : 'container d-flex flex-wrap justify-content-center'\n    }\n  >\n    {props.characters.map((a, i) => <Character name={a} key={i} clickEvent={props.clickEvent} />)}\n  </div>\n);\n\nexport default Container;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => <div className=\"footer text-center\"></div>;\n\nexport default Footer;\n","import React from \"react\";\nimport \"./Banner.css\";\n\nconst Banner = () => (\n  <div className=\"banner text-center d-flex align-items-center\">\n    <p className=\"m-0\">\n      Click on an image once to earn points. Click on image twice to lose all\n      your points! How good is your memory?\n    </p>\n  </div>\n);\n\nexport default Banner;\n","import A1 from \"./images/A1.jpg\";\nimport A2 from \"./images/A2.jpg\";\nimport A3 from \"./images/A3.jpg\";\nimport A4 from \"./images/A4.jpg\";\nimport A5 from \"./images/A5.jpg\";\nimport A6 from \"./images/A6.jpg\";\nimport A7 from \"./images/A7.jpg\";\nimport A8 from \"./images/A8.jpg\";\nimport A9 from \"./images/A9.jpg\";\nimport A10 from \"./images/A10.jpg\";\nimport A11 from \"./images/A11.jpg\";\nimport A12 from \"./images/A12.jpg\";\n\n\nconst images = [\n   A1,\n   A2,\n   A3,\n   A4,\n   A5,\n   A6,\n   A7,\n   A8,\n   A9,\n   A10,\n   A11,\n   A12\n  ];\n  \n  export default images;","import React, { Component } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport Banner from \"./Banner\";\nimport images from \"../images\";\n\nclass ClickyGame extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // stores the class value to assign to navMessage based on a good or bad click\n    navMsgColor: \"\",\n\n    // contains intro, success, and failure message\n    navMessage: \"Click image to begin!\",\n\n    // contains an array of image urls\n    allCharacters: this.shuffleArray(),\n\n    // will track  each clicked element.\n    wasClicked: [],\n\n    // shakes the container on an incorrect guess if set to true\n    shake: false\n  };\n\n  // binds the current this context to checkClicked to have access to the current state\n  // when passed down to the Character component\n  clickEvent = this.checkClicked.bind(this);\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current characters array to modify it by value, and not by reference\n    const newArr = images.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    while (newArr.length > 0) {\n      shuffleArr.push(\n        newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]\n      );\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: \"incorrect\",\n        navMessage: \"Incorrect guess!\",\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: \"correct\",\n      navMessage: \"You Guessed Correctly!\",\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ navMsgColor: \"\" }), 500);\n  }\n\n  // renders score to the navbar.\n  // passes the randomized state.allCharacters array to Container to create a Character component for each image.\n  // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Banner />\n        <Container\n          shake={state.shake}\n          characters={state.allCharacters}\n          clickEvent={this.clickEvent}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default ClickyGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickyGame from './components/ClickyGame';\nimport './index.css';\n\nReactDOM.render(<ClickyGame />, document.getElementById('root'));\n"],"sourceRoot":""}