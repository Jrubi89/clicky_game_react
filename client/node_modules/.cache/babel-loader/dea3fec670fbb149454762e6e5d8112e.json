{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\14077\\\\Desktop\\\\lol\\\\clicky_game_react\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\14077\\\\Desktop\\\\lol\\\\clicky_game_react\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\14077\\\\Desktop\\\\lol\\\\clicky_game_react\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\14077\\\\Desktop\\\\lol\\\\clicky_game_react\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\14077\\\\Desktop\\\\lol\\\\clicky_game_react\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import Navbar from\"./Navbar\";import Container from\"./Container\";import Footer from\"./Footer\";import Banner from\"./Banner\";import images from\"../images\";var ClickyGame=/*#__PURE__*/function(_Component){_inherits(ClickyGame,_Component);var _super=_createSuper(ClickyGame);function ClickyGame(){var _this;_classCallCheck(this,ClickyGame);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={score:0,highScore:0,// stores the class value to assign to navMessage based on a good or bad click\nnavMsgColor:\"\",// contains intro, success, and failure message\nnavMessage:\"Click image to begin!\",// contains an array of image urls\nallCharacters:_this.shuffleArray(),// will track  each clicked element.\nwasClicked:[],// shakes the container on an incorrect guess if set to true\nshake:false};_this.clickEvent=_this.checkClicked.bind(_assertThisInitialized(_this));return _this;}_createClass(ClickyGame,[{key:\"shuffleArray\",// used to shuffle the array of images when the DOM loads, and when an image is clicked\nvalue:function shuffleArray(){// creates a copy of the current characters array to modify it by value, and not by reference\nvar newArr=images.slice();// will store the shuffled array\nvar shuffleArr=[];// each loop through an index gets spliced from newArr, reducing its length\n// gets a random index based off the current length of newArr\n// splices the value from newArr, and pushes it to shuffleArr\nwhile(newArr.length>0){shuffleArr.push(newArr.splice(Math.floor(Math.random()*newArr.length),1)[0]);}return shuffleArr;}},{key:\"checkClicked\",value:function checkClicked(clickedElem){var _this2=this;// creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\nvar prevState=this.state.wasClicked.slice();// shuffles the images\nvar shuffled=this.shuffleArray();// tracks score\nvar score=this.state.score;var highScore=this.state.highScore;// if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\nif(!this.state.wasClicked.includes(clickedElem)){// if score and highScore are the same, then there is a new highScore value\nif(score===highScore){score++;highScore++;// if they are not equal, then only increase the score value\n}else{score++;}// adds the clicked item to wasClicked to track that it has been clicked\nprevState.push(clickedElem);}// resets the current score if the same element was clicked twice\nif(this.state.wasClicked.includes(clickedElem)){var _score=0;return this.setState({score:_score,highScore:highScore,navMsgColor:\"incorrect\",navMessage:\"Incorrect guess!\",allCharacters:shuffled,wasClicked:[],shake:true});}// if this runs, then the same element has not been clicked twice and the score is increased\nthis.setState({score:score,highScore:highScore,navMsgColor:\"correct\",navMessage:\"You Guessed Correctly!\",allCharacters:shuffled,wasClicked:prevState,shake:false});// removes the green correct indicator on a successful click after .5s to re-render the class on each success\nreturn setTimeout(function(){return _this2.setState({navMsgColor:\"\"});},500);}// renders score to the navbar.\n// passes the randomized state.allCharacters array to Container to create a Character component for each image.\n// passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n},{key:\"render\",value:function render(){var state=this.state;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Navbar,{score:state.score,highScore:state.highScore,navMessage:state.navMessage,navMsgColor:state.navMsgColor}),/*#__PURE__*/React.createElement(Banner,null),/*#__PURE__*/React.createElement(Container,{shake:state.shake,characters:state.allCharacters,clickEvent:this.clickEvent}),/*#__PURE__*/React.createElement(Footer,null));}}]);return ClickyGame;}(Component);export default ClickyGame;","map":{"version":3,"sources":["C:/Users/14077/Desktop/lol/clicky_game_react/client/src/components/ClickyGame.js"],"names":["React","Component","Navbar","Container","Footer","Banner","images","ClickyGame","state","score","highScore","navMsgColor","navMessage","allCharacters","shuffleArray","wasClicked","shake","clickEvent","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","shuffled","includes","setState","setTimeout"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport Banner from \"./Banner\";\nimport images from \"../images\";\n\nclass ClickyGame extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // stores the class value to assign to navMessage based on a good or bad click\n    navMsgColor: \"\",\n\n    // contains intro, success, and failure message\n    navMessage: \"Click image to begin!\",\n\n    // contains an array of image urls\n    allCharacters: this.shuffleArray(),\n\n    // will track  each clicked element.\n    wasClicked: [],\n\n    // shakes the container on an incorrect guess if set to true\n    shake: false\n  };\n\n  // binds the current this context to checkClicked to have access to the current state\n  // when passed down to the Character component\n  clickEvent = this.checkClicked.bind(this);\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current characters array to modify it by value, and not by reference\n    const newArr = images.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    while (newArr.length > 0) {\n      shuffleArr.push(\n        newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]\n      );\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: \"incorrect\",\n        navMessage: \"Incorrect guess!\",\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: \"correct\",\n      navMessage: \"You Guessed Correctly!\",\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ navMsgColor: \"\" }), 500);\n  }\n\n  // renders score to the navbar.\n  // passes the randomized state.allCharacters array to Container to create a Character component for each image.\n  // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Banner />\n        <Container\n          shake={state.shake}\n          characters={state.allCharacters}\n          clickEvent={this.clickEvent}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default ClickyGame;\n"]},"metadata":{},"sourceType":"module"}