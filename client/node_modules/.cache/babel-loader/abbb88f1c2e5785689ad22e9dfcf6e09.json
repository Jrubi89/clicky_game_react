{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\14077\\\\Desktop\\\\New folder\\\\clicky_game_react\\\\client\\\\src\\\\components\\\\ClickyGame.js\";\nimport React, { Component } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport Banner from \"./Banner\";\nimport images from \"../images\";\n\nclass ClickyGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      highScore: 0,\n      // stores the class value to assign to navMessage based on a good or bad click\n      navMsgColor: \"\",\n      // contains intro, success, and failure message\n      navMessage: \"Click image to begin!\",\n      // contains an array of image urls\n      allCharacters: this.shuffleArray(),\n      // will track  each clicked element.\n      wasClicked: [],\n      // shakes the container on an incorrect guess if set to true\n      shake: false\n    };\n    this.clickEvent = this.checkClicked.bind(this);\n  }\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current characters array to modify it by value, and not by reference\n    const newArr = images.slice(); // will store the shuffled array\n\n    const shuffleArr = []; // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice(); // shuffles the images\n\n    const shuffled = this.shuffleArray(); // tracks score\n\n    let score = this.state.score;\n    let highScore = this.state.highScore; // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++; // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      } // adds the clicked item to wasClicked to track that it has been clicked\n\n\n      prevState.push(clickedElem);\n    } // resets the current score if the same element was clicked twice\n\n\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: \"incorrect\",\n        navMessage: \"Incorrect guess!\",\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    } // if this runs, then the same element has not been clicked twice and the score is increased\n\n\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: \"correct\",\n      navMessage: \"You Guessed Correctly!\",\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    }); // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n\n    return setTimeout(() => this.setState({\n      navMsgColor: \"\"\n    }), 500);\n  } // renders score to the navbar.\n  // passes the randomized state.allCharacters array to Container to create a Character component for each image.\n  // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n\n\n  render() {\n    const state = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      score: state.score,\n      highScore: state.highScore,\n      navMessage: state.navMessage,\n      navMsgColor: state.navMsgColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Banner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      shake: state.shake,\n      characters: state.allCharacters,\n      clickEvent: this.clickEvent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default ClickyGame;","map":{"version":3,"sources":["C:/Users/14077/Desktop/New folder/clicky_game_react/client/src/components/ClickyGame.js"],"names":["React","Component","Navbar","Container","Footer","Banner","images","ClickyGame","state","score","highScore","navMsgColor","navMessage","allCharacters","shuffleArray","wasClicked","shake","clickEvent","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","shuffled","includes","setState","setTimeout","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport Banner from \"./Banner\";\nimport images from \"../images\";\n\nclass ClickyGame extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // stores the class value to assign to navMessage based on a good or bad click\n    navMsgColor: \"\",\n\n    // contains intro, success, and failure message\n    navMessage: \"Click image to begin!\",\n\n    // contains an array of image urls\n    allCharacters: this.shuffleArray(),\n\n    // will track  each clicked element.\n    wasClicked: [],\n\n    // shakes the container on an incorrect guess if set to true\n    shake: false\n  };\n\n  // binds the current this context to checkClicked to have access to the current state\n  // when passed down to the Character component\n  clickEvent = this.checkClicked.bind(this);\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current characters array to modify it by value, and not by reference\n    const newArr = images.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    while (newArr.length > 0) {\n      shuffleArr.push(\n        newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]\n      );\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: \"incorrect\",\n        navMessage: \"Incorrect guess!\",\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: \"correct\",\n      navMessage: \"You Guessed Correctly!\",\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ navMsgColor: \"\" }), 500);\n  }\n\n  // renders score to the navbar.\n  // passes the randomized state.allCharacters array to Container to create a Character component for each image.\n  // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Banner />\n        <Container\n          shake={state.shake}\n          characters={state.allCharacters}\n          clickEvent={this.clickEvent}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default ClickyGame;\n"]},"metadata":{},"sourceType":"module"}